language = "R"
parent = "r.datetime"
name = "date"
title = "Date"


[create]
section = "Create"

[create.ymd]
action = "From ymd"
code = "ISOdate(year, month, day) |> as.Date()"

[create.ymd.lubridate]
code = "lubridate::make_date(year, month, day)"

[create.current]
action = "Current date"
code = "Sys.Date()"

[create.current.lubridate]
code = "lubridate::today() |> as.Date()"

[create.current.utc]
action = "Current date in UTC timezone"
code = "lubridate::today(tzone = 'UTC') |> as.Date()"

[create.epoch]
action = "Unix epoch"
code = "as.Date(0)"

[create.days.epoch]
action = "From total days since Unix epoch"
code = "as.Date(n)"

[create.days.ref]
action = "From total days since reference date"
code = "as.Date(n, origin = ref_date)"

[create.str.ymd]
action = "Date from YYYY-MM-DD string"
code = "as.Date(x)"

[create.str.ymd.flex]
action = "Date from Y-m-d ordered string"
code = "lubridate::ymd(x)"

[create.str.dmy]
action = "Date from DD-MMM-YYYY string"
code = "as.Date(x, '%Y-%m-%d')"

[create.str.dmy.flex]
action = "Date from d-m-Y ordered string"
code = "lubridate::dmy(x)"

[create.vector]
section = "Vector of dates"

[create.vector.fill]
action = "Vector of length _n_ filled with date _d_"
code = "rep(d, n)"

[create.vector.seq.day]
action = "Sequence (vector) of _n_ consecutive dates, starting from _d_"
code = "seq(d, length.out = n, by = 'day')"

[create.vector.seq.day.x]
action = "Sequence of _n_ consecutive dates, starting from _d_"
code = "seq(d, length.out = n, by = 'day')"

[create.vector.seq.day.to]
action = "Sequence (vector) of consecutive dates between dates _d_ and _d2_"
code = "seq(d, d2, by = 'day')"

[create.vector.seq.week]
action = "Sequence of _n_ dates, starting from _d_ with weekly increments"
code = "seq(d, length.out = n, by = 'week')"

[create.vector.seq.week.rev]
action = "Sequence of _n_ dates counting down from date _d_ with weekly decrements"
code = "seq(d, length.out = n, by = '-1 week')"

[create.vector.seq.week.x]
action = "Sequence of _n_ dates, starting from _d_ with _w_-week increments"
code = "seq(d, length.out = n, by = 'w week')"

[create.vector.seq.week.to]
action = "Sequence of dates between _d_ and _d2_ with weekly increment"
code = "seq(d, d2, by = 'week')"

[create.vector.seq.year]
action = "Sequence of _n_ dates, starting from _d_ with yearly increments"
code = "seq(d, length.out = n, by = 'year')"


[constant]
section = "Constants"

[constant.na]
action = "NA"
code = "lubridate::NA_Date_"


[test]
section = "Test"

[test.inherits]
action = "Is date"
code = "lubridate::is.Date(x)"

[test.equal]
action = "Same date"
code = "x == y"

[test.before]
action = "Happens before _y_"
code = "x < y"

[test.after]
action = "Happens after _y_"
code = "x > y"


[extract]
section = "Extract"

[extract.days.epoch]
action = "Days from Unix epoch"
code = "as.integer(x)"

[extract.seconds.epoch]
action = "Seconds from Unix epoch (timestamp)"
code = "as.POSIXct(x) |> as.integer()"

[extract.year]
action = "Year"
code = "lubridate::year(x)"

[extract.month]
action = "Month"
code = "lubridate::month(x)"

[extract.day]
action = "Day"
code = "lubridate::day(x)"

[extract.week]
action = "Week number (1-53)"
code = "lubridate::week(x)"

[extract.week.iso]
action = "ISO week number (1-52)"
code = "lubridate::isoweek(x)"

[extract.weekday]
action = "Weekday number"
code = "lubridate::wday(x, week_start = 1)"
details = "Mon=1, Sun=7"


[update]
section = "Update"

[update.firstday.year]
action = "Change to first day of year"
code = "lubridate::yday(x) = 1"

[update.firstday.month]
action = "Change to first day of month"
code = "lubridate::day(x) = 1"

[update.year]
action = "Change year to _y_"
code = "lubridate::year(x) = y"


[derive]
section = "Derive"

[derive.firstday.year]
action = "Change to first day of year"
code = "trunc(x, 'year')"

[derive.firstday.month]
action = "Change to first day of month"
code = "trunc(d, 'month')"

[derive.shift.days]
action = "Shift forward by _n_ days"
code = "x + n"


[convert]
section = "Convert"

[convert.datetime]
action = "To datetime at midnight (00:00:00) in UTC"
code = "as.POSIXct(x)"

[convert.posixct]
action = "To `POSIXct` at midnight (00:00:00) in UTC"
code = "as.POSIXct(x)"

[convert.posixlt]
action = "To `POSIXlt` at midnight (00:00:00) in UTC"
code = "as.POSIXlt(x)"

[convert.format]
section = "Format"

[convert.format.iso]
action = "Format as ISO date (yyyy-mm-dd)"
code = "format(x)"

[convert.format.dmy]
action = "Format as dd-mm-yyyy"
code = "format(d, '%d-%m-%Y')"

[convert.format.syslocale]
action = "Format in system locale"
code = "format(x, '%a %b %d')"
