partial = true
language = "R"
parent = "r.basic"
after = "integer"
name = "numeric"
title = "numeric"
description = "For representing numeric values as doubles"


[constants]
section = "Constants"

[constants.min]
action = "Min value"
code = ".Machine$double.xmin"

[constants.max]
action = "Max value"
code = ".Machine$double.xmax"

[constants.eps]
action = "Epsilon: smallest representable addition difference"
code = ".Machine$double.eps"

[constants.neps]
action = "Negative epsilon: smallest representable subtraction difference"
code = ".Machine$double.neg.eps"

[constants.na]
action = "Missing value (NA)"
code = "NA_real_"

[constants.'nan']
action = "Not a number (NaN)"
code = "NaN"

[constants.'inf']
action = "Positive infinity"
code = "Inf"

[constants.ninf]
action = "Negative infinity"
code = "-Inf"


[create]
section = "Create"

[create.empty]
action = "Empty numeric vector, length 0"
code = "numeric()"

[create.vector]
section = "Numeric vectors"

[create.vector.zero]
action = "Numeric vector of zeros, length _n_"
code = "numeric(n)"

[create.vector.cast]
action = "Cast to numeric"
code = "as.numeric(y)"

[create.vector.string]
action = "Parse string to numeric"
code = "as.numeric(y)"
details = "Parse failures return `NA`"


[test]
section = "Test"

[test.is]
action = "Is numeric"
code = "is.numeric(x)"
details = "Integers are also numeric"

[test.real]
action = "Is numeric, but not integer"
code = "storage.mode(x) == 'double'"

[test.scalar]
section = "Tests for single number(s)"

[test.scalar.equal]
action = "Is equal to number"
code = "isTRUE(all.equal(x, y))"

[test.scalar.equal.2]
code = "abs(x - y) < .Machine$double.eps"

[test.scalar.equal.tol]
action = "Is equal to number with tolerance _t_"
code = "isTRUE(all.equal(x, y, tolerance = t))"

[test.scalar.equal.tol.2]
code = "abs(x - y) < t"

[test.vector]
section = "Tests for vector"

[test.vector.equal.all]
action = "All elements are equal (no `NA`s present)"
code = "abs(max(x) - min(x)) < .Machine$double.neg.eps"

[test.vector.equal.tol.all]
action = "All elements are equal within absolute tolerance _t_ (no `NA`s present)"
code = "abs(max(x) - min(x)) < t"

[test.vector.equal.all.na]
action = "All elements are equal (with NAs)"
code = "isTRUE(all.equal(x, y))"

[test.vector.equal.tol.na]
action = "All elements are equal within absolute tolerance _t_"
code = "isTRUE(all.equal(x, y, tolerance = t))"

[test.vector.whole.all]
action = "Are all elements whole numbers (no NAs present)"
code = "all(x == round(x))"

[test.vector.whole.all.2]
code = "max(x %% 1) < .Machine$double.neg.eps"

[test.vector.whole.all.na]
action = "Are all elements whole numbers?"
code = "max(x %% 1, na.rm = TRUE) < .Machine$double.neg.eps"

[test.vector.pdecimal.all]
action = "Are all elements rounded to at most _p_ decimals? (no NAs present)"
code = "all(x == round(x, p))"
details = "For example, for p=1: 0.1, -2.6, for p=2: 0.11, -2.63"

[test.vector.pdecimal.all.na]
action = "Are all elements rounded to at most _p_ decimals? (no NAs present)"
code = "all(x == round(x, p), na.rm = TRUE)"

[derive]
section = "Derive"

[derive.floor]
action = "Floor"
code = "floor(x)"
details = "trunc(2.6) = 2, trunc(-2.5) = -3"

[derive.ceiling]
action = "Ceiling"
code = "ceiling(x)"
details = "ceiling(2.6) = 3, ceiling(-2.5) = -2"

[derive.trunc]
action = "Truncate to integer"
code = "trunc(x)"
details = "trunc(2.6) = 2, trunc(-2.5) = -2"

[derive.round]
action = "Round to _d_ decimal places"
code = "round(x, d)"
details = "round(2.6) = 3, round(-2.55, 1) = -2.5"

[derive.round.pow10]
action = "Round to nearest _p_th power of ten"
code = "round(x, -p)"
details = "round(520, -2) = 500"

[derive.signif]
action = "Round to _d_th significant digits"
code = "signif(x, d)"


[convert]
section = "Convert"

[convert.int]
action = "To integer (truncate)"
code = "as.integer(x)"

[convert.format]
section = "Format as string"

[convert.format.default]
action = "To string"
code = "as.character(x)"

[convert.format.comma]
action = "Format with thousands separator (comma)"
code = "scales::comma(x)"

[convert.format.signif]
action = "Format with _d_ significant digits"
code = "formatC(x, digits = d, format='fg')"

[convert.format.percent]
action = "Format as percentage"
code = "scales::percent(x)"

[convert.format.sign]
action = "Format with sign prefix"
code = "formatC(x, format = 'f', flag = '+', drop0trailing = TRUE)"

[convert.format.sci]
action = "Format with scientific notation"
code = "formatC(x, format = 'e')"

[convert.format.sci.sign]
action = "Format with scientific notation and sign prefix"
code = "formatC(x, format = 'e', flag = '+')"

[convert.format.sci.signif]
action = "Format with scientific notation, with _d_ significant digits"
code = "formatC(x, format = 'e', digits = d)"
