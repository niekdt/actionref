language = "R"
parent = "r.basic"
name = "vector"
title = "vector"

[create]
section = "Create"

[create.define]
what = "Define vector"
code = "c(1, 2, 3)"

[create.constant.zero]
what = "Zeros, length _n_"
code = "numeric(n)"

[create.constant.'nan']
what = "NaNs, length _n_"
code = "NaN[1:n]"

[create.seq.ab]
what = "Sequence from _a_ to _b_"
code = "seq(a, b)"

[create.seq.linspace]
what = "Sequence between _a_ to _b_ of length _n_"
code = "seq(a, b, length.out=n)"


[test]
section = "Test"

[test.is]
what = "Is vector"
code = "?"

[test.empty]
what = "Is empty"
code = "length(x) == 0"

[test.contains.value]
what = "Contains value _v_"
code = "v %in% x"

[test.contains.na]
what = "Contains NA value(s)"
code = "anyNA(x)"

[test.contains.values]
what = "Contains each of the values in vector _v_"
code = "all(v %in% x)"

[test.missing]
what = "Does not contain value _v_"
code = "!(v %in% x)"


[extract]
section = "Extract"

[extract.length]
what = "Length"
code = "length(x)"

[extact.names]
what = "Element names"
code = "names(x)"

[extract.first]
what = "First element"
code = "x[1]"

[extract.last]
what = "Last element"
code = "data.table::last(x)"

[extract.last.tail]
code = "tail(x, 1)"


[aggregate]
section = "Aggregate"

[aggregate.sum]
what = "Sum elements"
code = "sum(x)"

[aggregate.mean]
what = "Mean of elements"
code = "mean(x)"

[aggregate.mode]
what = "Mode"
code = "table(x) %>% sort() %>% names() %>% last()"

[aggregate.mode.posint]
what = "Mode of positive integers 1:K"
code = "tabulate(x) %>% which.max()"

[aggregate.fun.grouped]
what = "Compute function per group, as list"
code = "tapply(x, INDEX = rep_len(1:2, length(x)), mean)"
details = "Outputs a list with the results per group"


[index]
section = "Indexing"

[index.'true']
what = "TRUE values"
code = "which(x)"

[index.'false']
what = "FALSE values"
code = "which(!x)"

[index.min]
what = "Index of smallest value"
code = "which.min(x)"

[index.max]
what = "Index of largest value"
code = "which.max(x)"



[derive]
section = "Derive"

[derive.reorder]
section = "Order"

[derive.reorder.sort.desc]
what = "Sort descending"
code = "sort(x)"

[derive.reorder.rev]
what = "Reverse"
code = "rev(x)"

[derive.reorder.shuffle]
what = "Shuffle"
code = "sample(x)"


[derive.map]
section = "Map"
description = "Element-wise operations"

[derive.map.ifelse]
what = "If-else with constant results"
code = "ifelse(x == TRUE, 1, 0)"

[derive.map.ifelse.vector]
what = "If-else with element-specific results"
code = "ifelse(x, seq(-1, -100, by=-1), 1:100)"

[derive.map.replace.na.zero]
what = "Replace NAs by zeros"
code = "ifelse(is.na(x), 0, x)"

[derive.map.replace.values.zero]
what = "Replace specific values by zeros"
code = "ifelse(x %in% values, 0, x)"

[derive.map.replace.index.values]
what = "Replace elements at index with given values"
code = "replace(x, c(2, 4), c(NA, Inf))"

[derive.map.order]
what = "Order by value, breaking ties with further args"
code = "order(x)"

[derive.map.rank]
what = "Ranking, with ties option"
code = "rank(x, ties='first')"

[derive.map.clip.lb]
what = "Clip values below _a_"
code = "pmin(x, a)"

[derive.map.clip.ub]
what = "Clip values above _b_"
code = "pmax(x, b)"

[derive.map.min]
what = "Find pairwise min between two vectors"
code = "pmin(x, y)"

[derive.map.max]
what = "Find pairwise max between two vectors"
code = "pmax(x, y)"

[derive.map.discretize.bin]
what = "Discretize values into bin number"
code = "findInterval(1:4, c(0, 2, 4))"

[derive.map.discretize.levels]
what = "Discretize values into _n_ levels"
code = "cut(x, n)"

[derive.map.discretize.intervals]
what = "Discretize values in specified intervals"
code = "cut(x, breaks)"

[derive.map.interpolate.linear]
what = "Linear interpolation"
code = "approxfun(x, method='linear')(x2)"

[derive.map.interpolate.spline]
what = "Spline interpolation"
code = "splinefun(x)(x2)"

[derive.map.interpolate.sspline]
what = "Smoothing spline interpolation"
code = "smooth.spline(x) %>% predict(x2)"


[derive.grow]
section = "Grow"

[derive.grow.rep]
what = "Repeat vector _n_ times"
code = "rep(x, n)"

[derive.grow.replen]
what = "Repeat vector up to length _n_"
code = "rep_len(x, n)"


[derive.shrink]
section = "Shrink"

[derive.shrink.remove.na]
what = "Exclude NA"
code = "na.exclude(x)"

[derive.shrink.remove.na.2]
code = "x[!is.na(x)]"

[derive.shrink.remove.na.filter]
code = "Filter(Negate(is.na), x)"

[derive.shrink.remove.nonfinite]
what = "Exclude non-finite values"
code = "x[is.finite(x)]"

[derive.shrink.remove.nonfinite.filter]
code = "Filter(is.finite, x)"

[derive.shrink.diff]
what = "Lagged difference"
code = "diff(x)"

[derive.shrink.sample]
what = "Sample _n_ elements"
code = "sample(x, n)"


[convert]
section = "Convert"

[convert.list.vectors]
what = "Split into a list of vectors, according to a grouping vector"
code = "split(x, g)"
details = "Can be undone by unsplit(y, g)"

[convert.rle]
what = "Running-length encoding"
code = "rle(x)"
