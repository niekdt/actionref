language = "R"
parent = "r.basic"
name = "formula"
title = "formula"
details = "This sheet is incomplete."

[create]
section = "Create"

[create.intercept]
what = "Intercept only"
code = "y ~ 1"

[create.abline]
what = "With intercept and single variable"
code = "y ~ x"

[create.slope]
what = "Without intercept, and single variable"
code = "y ~ -1 + x"

[create.allvar]
what = "With all variables"
code = "y ~ ."

[create.nresp]
what = "No response variable"
code = "~ 1"

[create.str]
what = "From string"
code = "as.formula(str)"

[create.str.eval]
code = "eval(parse(text='y ~ x'))"
details = "Not recommended"


[test]
section = "Test"

[test.is]
what = "Is formula"
code = "is(f, 'formula')"

[test.inherits]
what = "Is formula or subclass"
code = "inherits(f, 'formula')"

[test.equal]
what = "Formulas are equal"
code = "f1 == f2"

[test.equal.2]
code = "isTRUE(all.equal(f1, f2))"

[test.response]
what = "Has response"
code = "attr(terms(f), 'response') != 0"

[test.intercept]
what = "Has intercept"
code = "attr(terms(f), 'intercept') != 0"
details = "Surely there is an easier way"


[extract]
section = "Extract"

[extract.vars]
what = "Variable names"
code = "all.vars(f)"

[extract.vars.lhs]
what = "Left-hand side variable names"
code = "all.vars(update(f,  ~ 1))"

[extract.vars.rhs]
what = "Right-hand side variable names"
code = "all.vars(update(f,  1 ~ .))"

[extract.env]
what = "Environment"
code = "environment(f)"


[derive]
section = "Derive"

[derive.add.term]
what = "Add a term"
code = "update(f, ~ . + w)"

[derive.add.terms]
what = "Add terms"
code = "update(f, ~ . + w + z)"

[derive.set.response]
what = "Set response"
code = "update(f, y ~ .)"

[derive.set.terms]
what = "Set terms"
code = "update(f, ~ w + z)"

[derive.remove.response]
what = "Remove response"
code = "update(f, NULL ~ .)"

[derive.remove.response.terms]
code = "formula(delete.response(terms(f)))"

[derive.remove.intercept]
what = "Remove intercept"
code = "update(f, ~ . + -1)"

[derive.remove.env]
what = "Remove environment"
code = "environment(f) = NULL"
details = "Useful for formula serialization to prevent the entire workspace from being serialized along with it"


[evaluate]
section = "Evaluate"

[evaluate.coef]
what = "Evaluate a formula with known coefficients"
code = """
mm = model.matrix( ~ a + poly(b, 2, raw=TRUE), data.frame(a=1, b=2:4))
pred = coef %*% t(mm)
"""


[convert]
section = "Convert"

[convert.str]
what = "String"
code = "deparse(f)"

[convert.array.str]
what = "String array"
code = "as.character(f)"
